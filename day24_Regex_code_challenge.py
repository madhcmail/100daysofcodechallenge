"""
Turn the following unix pipeline into Python code using generators
$ for i in ../*/*py; do grep ^import $i|sed 's/import //g' ; done | sort | uniq -c | sort -nr
   4 unittest
   4 sys
   3 re
   3 csv
   2 tweepy
   2 random
   2 os
   2 json
   2 itertools
   1 time
   1 datetime
"""
import glob
import re
import sys
from collections import Counter


# Below function searches for the files that ends with .py and gives file name one by one
def gen_files(pat):
    for file in glob.glob(pat):
        yield file


# This function reads file and gives the content of the file line by line
def gen_lines(files):
    for file in files:
        with open(file) as f:
            line = f.readline()
            while line:
                yield line
                line = f.readline()


# This grep function finds the match and pulls out only the group
def gen_grep(lines, pattern):
    ro = re.compile(pattern)
    if ro.groups > 1:
        sys.exit(-1)
    for line in lines:
        for match in ro.finditer(line):
            if match is not None:
                yield match.group(ro.groups)


# This function uses counter object to count the values and provide most common words
def gen_count(lines):
    cnt_occurances = Counter(lines)
    yield cnt_occurances.most_common()  # use most_common to display in descending order


# This displays the output generated by the counter function in the required output format
def display_output(cnt_tuple):
    for lib,count in cnt_tuple:
        print(f"{lib} {count}")


if __name__ == "__main__":
    # call the generators, passing one to the other
    files = gen_files('../*/*.py') # find .py files
    lines = gen_lines(files) # extract line by line
    grep_match = gen_grep(lines, r'^import (\w+)') # find the required match
    count_tuple = gen_count(grep_match) # Count the occurances
    display_output(next(count_tuple))   # display the result

